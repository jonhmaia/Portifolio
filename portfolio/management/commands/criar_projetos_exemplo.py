from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from portfolio.models import Projeto, Tecnologia
from django.utils import timezone
import requests
from io import BytesIO

class Command(BaseCommand):
    help = 'Cria projetos de exemplo para demonstra√ß√£o'
    
    def handle(self, *args, **options):
        # Buscar tecnologias existentes
        django_tech = Tecnologia.objects.get(nome='Django')
        python_tech = Tecnologia.objects.get(nome='Python')
        js_tech = Tecnologia.objects.get(nome='JavaScript')
        react_tech = Tecnologia.objects.get(nome='React')
        postgres_tech = Tecnologia.objects.get(nome='PostgreSQL')
        bootstrap_tech = Tecnologia.objects.get(nome='Bootstrap')
        html_tech = Tecnologia.objects.get(nome='HTML5')
        css_tech = Tecnologia.objects.get(nome='CSS3')
        git_tech = Tecnologia.objects.get(nome='Git')
        
        projetos_exemplo = [
            {
                'titulo': 'Sistema de Gest√£o Empresarial',
                'subtitulo': 'Plataforma completa para gest√£o de neg√≥cios',
                'descricao_curta': 'Sistema web completo para gest√£o empresarial com m√≥dulos de vendas, estoque, clientes e relat√≥rios financeiros.',
                'descricao_completa': '''Este projeto foi desenvolvido para automatizar e otimizar processos empresariais. 
                
Funcionalidades principais:
‚Ä¢ Gest√£o completa de clientes e fornecedores
‚Ä¢ Controle de estoque com alertas autom√°ticos
‚Ä¢ Sistema de vendas com emiss√£o de notas fiscais
‚Ä¢ Relat√≥rios gerenciais e dashboard interativo
‚Ä¢ Controle de usu√°rios e permiss√µes
‚Ä¢ Integra√ß√£o com APIs de pagamento
                
O sistema foi constru√≠do com Django no backend, utilizando PostgreSQL como banco de dados e Bootstrap para uma interface responsiva e moderna.''',
                'tecnologias': [django_tech, python_tech, postgres_tech, bootstrap_tech, js_tech],
                'link_repositorio': 'https://github.com/joaomaia/sistema-gestao',
                'link_deploy': 'https://sistema-gestao.railway.app',
                'destaque': True,
                'ordem': 1,
                'status': 'concluido'
            },
            {
                'titulo': 'E-commerce Moderno',
                'subtitulo': 'Loja virtual com carrinho e pagamentos',
                'descricao_curta': 'Plataforma de e-commerce completa com carrinho de compras, sistema de pagamentos e painel administrativo.',
                'descricao_completa': '''E-commerce desenvolvido com foco na experi√™ncia do usu√°rio e performance.
                
Caracter√≠sticas:
‚Ä¢ Interface moderna e responsiva
‚Ä¢ Carrinho de compras com persist√™ncia
‚Ä¢ Sistema de pagamentos integrado
‚Ä¢ Gest√£o de produtos e categorias
‚Ä¢ Sistema de avalia√ß√µes e coment√°rios
‚Ä¢ Painel administrativo completo
‚Ä¢ Otimiza√ß√£o para SEO
                
Utiliza React no frontend para uma experi√™ncia fluida e Django REST Framework no backend para APIs robustas.''',
                'tecnologias': [react_tech, django_tech, python_tech, js_tech, postgres_tech],
                'link_repositorio': 'https://github.com/joaomaia/ecommerce-react',
                'link_deploy': 'https://ecommerce-demo.railway.app',
                'destaque': True,
                'ordem': 2,
                'status': 'concluido'
            },
            {
                'titulo': 'API REST Completa',
                'subtitulo': 'API robusta com autentica√ß√£o JWT',
                'descricao_curta': 'API REST desenvolvida com Django REST Framework, incluindo autentica√ß√£o JWT, documenta√ß√£o autom√°tica e testes.',
                'descricao_completa': '''API REST profissional desenvolvida seguindo as melhores pr√°ticas.
                
Recursos implementados:
‚Ä¢ Autentica√ß√£o JWT com refresh tokens
‚Ä¢ Documenta√ß√£o autom√°tica com Swagger
‚Ä¢ Versionamento de API
‚Ä¢ Throttling e rate limiting
‚Ä¢ Testes automatizados
‚Ä¢ Logs estruturados
‚Ä¢ Deploy automatizado
                
Ideal para servir como backend para aplica√ß√µes web e mobile, com endpoints bem documentados e seguros.''',
                'tecnologias': [django_tech, python_tech, postgres_tech],
                'link_repositorio': 'https://github.com/joaomaia/api-rest-django',
                'link_deploy': 'https://api-demo.railway.app/docs/',
                'destaque': False,
                'ordem': 3,
                'status': 'concluido'
            },
            {
                'titulo': 'Portf√≥lio Pessoal',
                'subtitulo': 'Site pessoal com painel administrativo',
                'descricao_curta': 'Portf√≥lio pessoal desenvolvido em Django com sistema de administra√ß√£o para gerenciar projetos e conte√∫do.',
                'descricao_completa': '''Este pr√≥prio portf√≥lio que voc√™ est√° visualizando!
                
Funcionalidades:
‚Ä¢ Design responsivo e moderno
‚Ä¢ Sistema de administra√ß√£o completo
‚Ä¢ Gerenciamento de projetos via CRUD
‚Ä¢ Sistema de tecnologias categorizadas
‚Ä¢ Galeria de imagens por projeto
‚Ä¢ Internacionaliza√ß√£o (PT/EN)
‚Ä¢ Deploy automatizado no Railway
                
Desenvolvido como demonstra√ß√£o das habilidades em desenvolvimento web full-stack.''',
                'tecnologias': [django_tech, python_tech, html_tech, css_tech, bootstrap_tech, git_tech],
                'link_repositorio': 'https://github.com/joaomaia/portfolio-django',
                'link_deploy': 'https://portfolio.railway.app',
                'destaque': True,
                'ordem': 0,
                'status': 'desenvolvimento'
            }
        ]
        
        created_count = 0
        
        for projeto_data in projetos_exemplo:
            # Verificar se o projeto j√° existe
            if not Projeto.objects.filter(titulo=projeto_data['titulo']).exists():
                # Extrair tecnologias
                tecnologias = projeto_data.pop('tecnologias')
                
                # Criar o projeto
                projeto = Projeto.objects.create(**projeto_data)
                
                # Adicionar tecnologias
                projeto.tecnologias.set(tecnologias)
                
                created_count += 1
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì Projeto criado: {projeto.titulo}')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö† Projeto j√° existe: {projeto_data["titulo"]}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüéâ Processo conclu√≠do!\n'
                f'üì¶ {created_count} projetos criados\n'
                f'üîó Acesse o admin para gerenciar: http://127.0.0.1:8000/admin/'
            )
        )